## Task Management
It is required to track tasks and subtasks using todo.ai and not via built in TODO tools
TODO.md and .todo.ai/ must always be committed together
Always ask for user confirmation before archiving completed tasks using todo.ai

## Installation
When installing todo.ai from https://github.com/fxstein/todo.ai, use curl to download the single file: `curl -o todo.ai https://raw.githubusercontent.com/fxstein/todo.ai/main/todo.ai && chmod +x todo.ai`. Do NOT clone the repository with git clone - only the single todo.ai file is needed.

## Releases
When the user says "Release todo.ai" or similar:

1. **Generate a human-readable release summary** by analyzing commits since the last release
   - Review the commit messages to understand the changes
   - Write a 2-3 paragraph summary highlighting the key improvements, new features, and important changes
   - Focus on user-facing benefits and notable improvements
   - Optionally include commit links: `([hash](https://github.com/user/repo/commit/fullhash))` when referencing specific commits
   - Get the repo URL: `git remote get-url origin` and convert SSH to HTTPS if needed
   - Save the summary to `release/RELEASE_SUMMARY.md`

2. **Run the intelligent release script** with the summary: `./release/release.sh --summary release/RELEASE_SUMMARY.md`
   - The script will automatically analyze commits since the last release
   - Determine version bump type (major/minor/patch) based on commit messages
   - Generate detailed release notes from commits
   - Include the AI-generated summary at the top of the release notes
   - Ask for human review if it's a major release or has many commits (>10)
   - Execute the release automatically after approval

If the user requests a release review, show them the generated release notes and summary, then wait for approval before proceeding. For major releases or releases with >10 commits, always request human review before executing.

## Commit Message Prefixes for Release Numbering

When making commits, use explicit prefixes to help the release script correctly determine version bumps:

**Backend/Infrastructure Commits (will be PATCH releases):**
- `backend:` - Backend infrastructure changes (e.g., `backend: Fix release script error handling`)
- `infra:` - Infrastructure improvements (e.g., `infra: Add release logging`)
- `release:` - Release process improvements (e.g., `release: Add commit link support`)
- `internal:` - Internal refactoring (e.g., `internal: Refactor version update function`)

**Frontend/User-Facing Commits (can be MINOR/MAJOR):**
- `feat:` - New features for users (e.g., `feat: Add task filtering command`)
- `fix:` - Bug fixes that affect users (e.g., `fix: Correct task modification logic`)
- `docs:` - User-facing documentation (e.g., `docs: Update README with examples`)

**Special Cases:**
- Backend-only releases (only infrastructure changes) are automatically detected as PATCH
- If you forget a prefix, file analysis will catch backend-only changes
- Mixed releases (both frontend and backend) use keyword analysis

## Bug Reporting
When todo.ai encounters errors or unexpected behavior, or when the user asks to report a bug:

**CRITICAL REQUIREMENTS:**
1. **MUST use `./todo.ai report-bug` command** - This is the ONLY way to report bugs about todo.ai
2. **NEVER use `gh issue create` directly** - This bypasses all safeguards and duplicate detection
3. **NEVER use GitHub API directly** for bug reports - Always go through the bug reporting feature
4. Always require explicit user confirmation before any GitHub API calls
5. Show preview of bug report before asking for confirmation
6. Respect privacy: For private repositories, remove all repo identifiers

**Usage:**
```bash
./todo.ai report-bug "Error description" "Error context" "command"
```

**Examples:**
- ✅ User says "report a bug about X": Use `./todo.ai report-bug "X" "context" "command"`
- ✅ "An error occurred. Would you like me to report this bug?" → If yes, use `./todo.ai report-bug`
- ❌ "Error occurred. Automatically reporting to GitHub..." (NEVER DO THIS)
- ❌ Using `gh issue create` directly for bug reports (NEVER DO THIS)
- ❌ Creating GitHub issues manually with `gh CLI` for todo.ai bugs (NEVER DO THIS)

**Why this is required:**
- The bug reporting feature includes duplicate detection
- It ensures proper formatting and context collection
- It maintains user control and privacy protection
- It follows the designed workflow for bug tracking
